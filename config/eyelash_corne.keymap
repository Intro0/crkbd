#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/* Key Position Groups */

#define KEYS_LEFT 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33
#define KEYS_RIGHT 7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41
#define KEYS_THUMBS 42 43 44 45 46 47

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mtl: mod_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_RIGHT KEYS_THUMBS>;
            hold-trigger-on-release;
        };

        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_LEFT KEYS_THUMBS>;
            hold-trigger-on-release;
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        MouseLeftClick {
            bindings = <&mkp LCLK>;
            key-positions = <45 46>;
        };

        MouseClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <46 47>;
        };

        hyper {
            bindings = <&kp RS(RA(RC(RIGHT_GUI)))>;
            key-positions = <46 43>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 10>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <38 39>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <31 30>;
        };

        third {
            bindings = <&mo 3>;
            key-positions = <44 45>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC               &kp Q            &kp W            &kp E         &kp R              &kp T                          &kp UP                &kp Y  &kp U               &kp I                 &kp O            &kp P                &none
&kp TAB               &mtl LEFT_GUI A  &mtl LEFT_ALT S  &mtl LCTRL D  &mtl LEFT_SHIFT F  &kp G                &kp LEFT  &kp ENTER  &kp RIGHT  &kp H  &mtr RIGHT_SHIFT J  &mtr RIGHT_CONTROL K  &mtr LEFT_ALT L  &mtr RIGHT_GUI SEMI  &kp SQT
&kp LS(LC(NUMBER_4))  &kp Z            &kp X            &kp C         &kp V              &kp B  &kp C_MUTE              &kp DOWN              &kp N  &kp M               &kp COMMA             &kp DOT          &kp FSLH             &none
                                                        &kp LGUI      &kp SPACE          &mo 2                                                &mo 1  &kp RIGHT_SHIFT     &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_1 {
            bindings = <
&none  &kp FSLH      &kp N7  &kp N8  &kp N9  &kp LS(PLUS)                                           &mmv MOVE_UP                     &none     &none   &none     &none      &none  &none
&none  &kp LS(STAR)  &kp N4  &kp N5  &kp N6  &kp MINUS                              &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT  &none  &none
&none  &kp N0        &kp N1  &kp N2  &kp N3  &kp EQUAL     &kp C_BRIGHTNESS_AUTO                    &mmv MOVE_DOWN                   &none     &none   &none     &none      &none  &none
                             &trans  &trans  &trans                                                                                  &trans    &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        layer_2 {
            bindings = <
&trans  &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)                    &trans          &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &none         &none       &none
&trans  &kp LS(LT)    &kp LS(LPAR)  &kp LBKT       &kp LS(LBRC)  &kp BSLH                 &trans  &trans  &trans  &kp FSLH       &kp LS(RBRC)   &kp RBKT      &kp LS(RPAR)  &kp LS(GT)  &kp GRAVE
&trans  &none         &none         &none          &none         &none          &trans            &trans          &none          &kp LS(UNDER)  &kp MINUS     &kp LS(PLUS)  &kp EQUAL   &kp LS(TILDE)
                                    &trans         &trans        &trans                                           &trans         &trans         &trans
            >;
        };

        layer_3 {
            bindings = <
&none  &none  &none  &none           &none        &none                       &none         &bt BT_CLR_ALL  &none       &none       &none  &none  &none
&none  &none  &none  &studio_unlock  &bootloader  &sys_reset           &none  &none  &none  &bt BT_CLR      &bt BT_NXT  &bt BT_PRV  &none  &none  &none
&none  &none  &none  &none           &none        &none       &none           &none         &none           &none       &none       &none  &none  &none
                     &none           &none        &none                                     &none           &none       &none
            >;
        };
    };
};
